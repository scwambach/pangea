{
  "New Sanity Object": {
    "prefix": "newSanityObject",
    "body": [
      "import { groups, headingProps, settingsProps } from '../docTypes/common'",
      "",
      "export const ${TM_FILENAME_BASE/([^.]+).*/${1}/} = {",
      "  name: '${TM_FILENAME_BASE/([^.]+).*/${1}/}',",
      "  title: '$1',",
      "  type: 'object',",
      "  groups,",
      "  fields: [",
      "    ...headingProps({ group: 'content' }),",
      "    ...settingsProps({}),",
      "    $2",
      "  ],",
      "}",
    ],
    "description": "New Sanity Object",
  },
  "New Test": {
    "prefix": "newTest",
    "body": [
      "import { ${TM_FILENAME_BASE/([^.]+).*/${1}/} } from '@components';",
      "import { cleanup, render } from '@testing-library/react';",
      "",
      "afterEach(cleanup);",
      "",
      "describe('<${TM_FILENAME_BASE/([^.]+).*/${1}/} />', () => {",
      "  test('$1', () => {",
      "    const { getByTestId } = render(",
      "      <${TM_FILENAME_BASE/([^.]+).*/${1}/} />",
      "    );",
      "    const component = getByTestId('$3');",
      "    expect(component).toBeVisible();",
      "  });",
      "});      ",
    ],
    "description": "Module",
  },
  "New Component": {
    "prefix": "newComponent",
    "body": [
      "import { ComponentProps } from '@/utils/types'",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1}/}Props extends ComponentProps {}",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1}/} = ({ className, componentId }: ${TM_FILENAME_BASE/(.*)/${1}/}Props) => {",
      "  return (",
      "    <div",
      "      id={componentId}",
      "      className={`${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}${className ? ` ${${className}}` : ''}`}",
      "    >",
      "      <code>",
      "        <pre",
      "          style={{",
      "            fontFamily: 'monospace',",
      "            display: 'block',",
      "            padding: '50px',",
      "            color: '#88ffbf',",
      "            backgroundColor: 'black',",
      "            textAlign: 'left',",
      "            whiteSpace: 'pre-wrap',",
      "          }}",
      "        >",
      "          {JSON.stringify('props', null, '    ')}",
      "        </pre>",
      "      </code>",
      "    </div>",
      "  )",
      "}",
      "",
    ],
    "description": "Component",
  },
  "New Block": {
    "prefix": "newBlock",
    "body": [
      "import { BlockProps } from \"@/utils/types\";",
      "import { BlockWrapper } from \"./BlockWrapper\";",
      "import { sanitize } from \"@/utils/sanitize\";",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1}/}Props extends BlockProps {}",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1}/} = ({",
      "  backgroundColor = 'bg-white',",
      "  bottom,",
      "  className,",
      "  colorStarter,",
      "  componentId,",
      "  heading,",
      "  primaryEnder,",
      "  ...props",
      "}: ${TM_FILENAME_BASE/(.*)/${1}/}Props) => {",
      "  const blockProps = {",
      "    backgroundColor,",
      "    bottom,",
      "    colorStarter,",
      "    componentId,",
      "    heading,",
      "    primaryEnder,",
      "  };",
      "",
      "const lightMode =",
      "  sanitize(backgroundColor) === 'bg-white' ||",
      "  sanitize(backgroundColor) === 'bg-secondary' ||",
      "  sanitize(backgroundColor) === 'bg-tertiary';",
      "",
      "  const hasWave = sanitize(backgroundColor) === \"waves\";",
      "  const hasPattern = sanitize(backgroundColor) === \"pattern\";",
      "",
      "  return (",
      "    <BlockWrapper",
      "      {...blockProps}",
      "      className={`${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}${className ? ` ${${className}}` : \"\"}`}",
      "    >",
      "      <code>",
      "        <pre",
      "          style={{",
      "            fontFamily: \"monospace\",",
      "            display: \"block\",",
      "            padding: \"50px\",",
      "            color: \"#88ffbf\",",
      "            backgroundColor: \"black\",",
      "            textAlign: \"left\",",
      "            whiteSpace: \"pre-wrap\",",
      "          }}",
      "        >",
      "          {JSON.stringify(props, null, \"    \")}",
      "        </pre>",
      "      </code>",
      "    </BlockWrapper>",
      "  );",
      "};",
    ],
    "description": "Component",
  },
  "New Sanity Block": {
    "prefix": "newSanityBlock",
    "body": [
      "import { defineField, defineType } from 'sanity'",
      "import { fieldsets } from '../common/fieldsets'",
      "import { block } from '../common/block'",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1}/} = defineType({",
      "  name: '${TM_FILENAME_BASE/(.*)/${1}/}',",
      "  title: '$1${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}',",
      "  type: 'object',",
      "  fieldsets: fieldsets(),",
      "  fields: [",
      "    ...block([",
      "      defineField({",
      "",
      "       })",
      "    ]),",
      "  ]",
      "})",
    ],
  },
  "New SVG": {
    "prefix": "newSvg",
    "body": [
      "interface Props {",
      "  size?: number;",
      "  color?: string;",
      "}",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1}/} = ({ size, color }: Props) => {",
      "  return (",
      "    $1",
      "  );",
      "};",
      "",
      "export default ${TM_FILENAME_BASE/(.*)/${1}/};",
      "",
    ],
    "description": "New SVG",
  },
  "Map Loop": {
    "prefix": "map-loop",
    "body": ["{$1.map($2 => (", "  $3", "))}"],
  },
  "Dangerously Set HTML": {
    "prefix": "danger-html",
    "body": ["<div dangerouslySetInnerHTML={{", "  __html: copy,", "}}", "/>"],
  },
  "Dump": {
    "prefix": "dump",
    "body": [
      "",
      "",
      "",
      "<code>",
      "  <pre style={{",
      "    fontFamily: 'monospace',",
      "    display: 'block',",
      "    padding: '50px',",
      "    color: '#88ffbf',",
      "    backgroundColor: 'black',",
      "    textAlign: 'left',",
      "    whiteSpace: 'pre-wrap',",
      "  }}",
      "  >",
      "    {JSON.stringify($1, null, '    ')}",
      "  </pre>",
      "</code>",
      "",
      "",
      "",
    ],
  },
}
